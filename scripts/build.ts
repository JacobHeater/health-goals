import yaml from 'js-yaml';
import { join } from 'path';
import fs from 'fs-extra';
import rimraf from 'rimraf';

import { IRemindersAsset } from '../src/assets/ireminders-asset';
import { TemplateAsset } from '../src/assets/template-asset';

const remindersPath: string = join(process.cwd(), 'assets', 'reminders.yaml');

(async () => {
    rimraf.sync(join(process.cwd(), '.github', 'workflows', '*'));

    const remindersYaml  = (await fs.readFile(remindersPath)).toString();
    const remindersObj = yaml.load(remindersYaml) as IRemindersAsset;

    const { reminders } = remindersObj;
    const groupsKeys = Object.keys(reminders);

    for (const groupKey of groupsKeys) {
        const group = reminders[groupKey];
        let text = group.text;

        for (const entry of group.entries) {
            if (!text) {
                text = entry.text;
            }

            const workflow = new TemplateAsset();
            workflow.setName(entry.name);
            workflow.setSubject(entry.subject);
            workflow.setText(text || '');
            workflow.setCron(entry.time);

            const workflowYaml = getWorkflowFinalYaml(yaml.dump(workflow));

            await fs.writeFile(join(process.cwd(), '.github', 'workflows', `${groupKey}.${sanitizeName(entry.name)}.yaml`), workflowYaml);
        }
    }
})();

function getWorkflowFinalYaml(yaml: string): string {
    return (
`
${getBuildHeader()}

${yaml}

`
);
}

function getBuildHeader() {
    return ( 
`
# This file was automatically generated by
# a build script. Do not edit this file directly.
# Changes to be reflected here must be made in the 
# ./assets/reminders.yaml file. You can regenerate
# this file at any time by running \`npm run build\`.
`
);
}

function sanitizeName(name: string): string {
    return name.replace(/\s+?\|\s+?|\s/g, '-').toLowerCase();
}